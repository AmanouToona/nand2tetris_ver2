// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // 1st Mux16
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outM16);

    // a register ---------------------------------------------------
    Not(in=instruction[15], out=not15);
    Or(a=not15, b=instruction[5], out=loadAregister);
    ARegister(in=outM16, load=loadAregister, out=address, out[0..14]=addressM);

    // 2nd Mux16 ----------------------------------------------------
    Mux16(a=address, b=inM, sel=instruction[12], out=AorM);

    // ALU ----------------------------------------------------------
    ALU(x=D, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM ,out=outALU,zr=zr, ng=ng);

    // Dregister ----------------------------------------------------
    DRegister(in=outALU, load=instruction[4], out=D);

    // PC -----------------------------------------------------------
    // jump or not
    Or(a=zr, b=ng, out=nonPositive);
    Not(in=nonPositive, out=positive);

    And(a=positive, b=instruction[0], out=jmp0);
    And(a=zr, b=instruction[1], out=jmp1);
    And(a=ng, b=instruction[2], out=jmp2);

    Or(a=jmp0, b=jmp1, out=jmp01);
    Or(a=jmp01, b=jmp2, out=jmp012);
    And(a=instruction[15], b=jmp012, out=jmp);

    // count up or not
    Not(in=jmp, out=notJmp);

    PC(in=address, load=jmp, reset=reset, inc=notJmp, out[0..14]=pc);

    // writeM -------------------------------------------------------
    And(a=instruction[3], b=instruction[15], out=writeM);
}